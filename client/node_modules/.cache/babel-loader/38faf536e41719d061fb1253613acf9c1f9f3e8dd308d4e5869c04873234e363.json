{"ast":null,"code":"var _jsxFileName = \"/Users/upendra/Desktop/Developer/blockchain/practice/randomBasicProjects/basicclaculator2/treePlantationWEB3/client/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport { useState, useEffect } from \"react\";\nimport treePlantingContract from \"./contracts/TreePlantingContract.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(0);\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [treeSpecies, setTreeSpecies] = useState(\"\");\n  const [plantingDate, setPlantingDate] = useState(\"\");\n  const treeAddress = treePlantingContract.networks[\"5777\"].address;\n  const treeABI = treePlantingContract.abi;\n\n  // const parsecontract = JSON.parse(JSON.stringify(contract_abi))\n\n  const HttpProvider = \"http://127.0.0.1:7545\";\n  // const web3 = new Web3(Web3.givenProvider || \"http://127.0.0.1:7545\");\n  const web3 = new Web3(new Web3.providers.HttpProvider(HttpProvider));\n  const treeData = new web3.eth.Contract(treeABI, treeAddress);\n  let accountmeta = 0;\n  useEffect(() => {\n    main();\n    ethEnabled();\n    // getcontract();\n  }, []);\n  const main = async () => {\n    const accounts = await web3.eth.getAccounts();\n    accountmeta = accounts[0];\n    setAccount(accountmeta);\n    console.log(account);\n  };\n  const ethEnabled = async () => {\n    if (window.ethereum) {\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      window.web3 = new Web3(window.ethereum);\n      console.log(\"metamask exist\");\n      return true;\n    }\n    console.log(\"metamask not exist\");\n    return false;\n  };\n  const treeplantHandler = async () => {\n    await treeData.methods.addTreePlantingEvent(latitude, longitude, treeSpecies, plantingDate).send({\n      from: account,\n      gasPrice: \"1000000000\",\n      // Replace with an appropriate gas price\n      gas: 200000 // Replace with an appropriate gas limit\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [account, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: latitude,\n        onChange: e => setLatitude(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: longitude,\n        onChange: e => setLongitude(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: treeSpecies,\n        onChange: e => setTreeSpecies(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: plantingDate,\n        onChange: e => setPlantingDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: treeplantHandler,\n        children: \" treeplantHandler\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DL5zPGoTpc2HXmnYI3cKhhxPj9c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Web3","useState","useEffect","treePlantingContract","jsxDEV","_jsxDEV","App","_s","account","setAccount","latitude","setLatitude","longitude","setLongitude","treeSpecies","setTreeSpecies","plantingDate","setPlantingDate","treeAddress","networks","address","treeABI","abi","HttpProvider","web3","providers","treeData","eth","Contract","accountmeta","main","ethEnabled","accounts","getAccounts","console","log","window","ethereum","request","method","treeplantHandler","methods","addTreePlantingEvent","send","from","gasPrice","gas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/upendra/Desktop/Developer/blockchain/practice/randomBasicProjects/basicclaculator2/treePlantationWEB3/client/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport { useState, useEffect } from \"react\";\n\nimport treePlantingContract from \"./contracts/TreePlantingContract.json\";\n\nfunction App() {\n  const [account, setAccount] = useState(0);\n\n\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [treeSpecies, setTreeSpecies] = useState(\"\");\n  const [plantingDate, setPlantingDate] = useState(\"\");\n\n\n  const treeAddress = treePlantingContract.networks[\"5777\"].address;\n\n  const treeABI = treePlantingContract.abi;\n\n  // const parsecontract = JSON.parse(JSON.stringify(contract_abi))\n\n  const HttpProvider = \"http://127.0.0.1:7545\";\n  // const web3 = new Web3(Web3.givenProvider || \"http://127.0.0.1:7545\");\n  const web3 = new Web3(new Web3.providers.HttpProvider(HttpProvider));\n\n  const treeData = new web3.eth.Contract(treeABI, treeAddress);\n\n  let accountmeta = 0;\n\n  useEffect(() => {\n    main();\n    ethEnabled();\n    // getcontract();\n  }, []);\n\n  const main = async () => {\n    const accounts = await web3.eth.getAccounts();\n    accountmeta = accounts[0];\n    setAccount(accountmeta);\n    console.log(account);\n  };\n\n\n  const ethEnabled = async () => {\n    if (window.ethereum) {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      window.web3 = new Web3(window.ethereum);\n      console.log(\"metamask exist\");\n      return true;\n    }\n    console.log(\"metamask not exist\");\n    return false;\n  };\n\n\n  const treeplantHandler = async () => {\n    await treeData.methods\n      .addTreePlantingEvent(latitude, longitude, treeSpecies, plantingDate)\n      .send({\n        from: account,\n        gasPrice: \"1000000000\", // Replace with an appropriate gas price\n        gas: 200000, // Replace with an appropriate gas limit\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {account}\n      \n      \n       \n        <br />\n        <input\n          type=\"string\"\n          value={latitude}\n          onChange={(e) => setLatitude(e.target.value)}\n        ></input>\n        <input\n          type=\"string\"\n          value={longitude}\n          onChange={(e) => setLongitude(e.target.value)}\n        ></input>{\" \"}\n        <input\n          type=\"string\"\n          value={treeSpecies}\n          onChange={(e) => setTreeSpecies(e.target.value)}\n        ></input>{\" \"}\n        <input\n          type=\"string\"\n          value={plantingDate}\n          onChange={(e) => setPlantingDate(e.target.value)}\n        ></input>\n        <button onClick={treeplantHandler}> treeplantHandler</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}