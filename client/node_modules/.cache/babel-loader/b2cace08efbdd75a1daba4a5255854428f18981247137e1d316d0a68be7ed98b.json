{"ast":null,"code":"var _jsxFileName = \"/Users/upendra/Desktop/Developer/blockchain/practice/randomBasicProjects/basicclaculator2/treePlantationWEB3/client/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport { useState, useEffect } from \"react\";\nimport calc from \"./contracts/calculator.json\";\nimport { toBN } from \"web3-utils\";\nimport treePlantingContract from \"./contracts/TreePlantingContract.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(0);\n  const [val, setVal] = useState(null);\n  const [a, setA] = useState(\"\");\n  const [b, setB] = useState(\"\");\n  const [addresult, setAddResult] = useState(\"\");\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [treeSpecies, setTreeSpecies] = useState(\"\");\n  const [plantingDate, setPlantingDate] = useState(\"\");\n  const contract_address = calc.networks[\"5777\"].address;\n  const contract_abi = calc.abi;\n  const treeAddress = treePlantingContract.networks[\"5777\"].address;\n  const treeABI = treePlantingContract.abi;\n\n  // const parsecontract = JSON.parse(JSON.stringify(contract_abi))\n\n  const HttpProvider = \"http://127.0.0.1:7545\";\n  // const web3 = new Web3(Web3.givenProvider || \"http://127.0.0.1:7545\");\n  const web3 = new Web3(new Web3.providers.HttpProvider(HttpProvider));\n  const contractData = new web3.eth.Contract(contract_abi, contract_address);\n  const treeData = new web3.eth.Contract(treeABI, treeAddress);\n  let accountmeta = 0;\n  useEffect(() => {\n    main();\n    ethEnabled();\n    // getcontract();\n  }, []);\n  const main = async () => {\n    const accounts = await web3.eth.getAccounts();\n    accountmeta = accounts[0];\n    setAccount(accountmeta);\n    console.log(account);\n  };\n\n  // const getcontract = async() => {\n  //   await contractData.methods.gettingdata().call().then(result => {\n\n  //     setData(result);\n  //     console.log(result);\n\n  //   });\n  //  // console.log(getval);\n  // };\n\n  //const Web3 = require(\"web3\");\n  const ethEnabled = async () => {\n    if (window.ethereum) {\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      window.web3 = new Web3(window.ethereum);\n      console.log(\"metamask exist\");\n      return true;\n    }\n    console.log(\"metamask not exist\");\n    return false;\n  };\n  const addHandler = async () => {\n    await contractData.methods.add(a, b).send({\n      from: account,\n      gasPrice: \"1000000000\",\n      // Replace with an appropriate gas price\n      gas: 200000 // Replace with an appropriate gas limit\n    });\n    // const res = await contractData.methods.showresult().call();\n    // console.log(res);\n    // setAddResult(res.toString());\n\n    setA(\"\");\n    setB(\"\");\n  };\n  const treeplantHandler = async () => {\n    await treeData.methods.addTreePlantingEvent(latitude, longitude, treeSpecies, plantingDate).send({\n      from: account,\n      gasPrice: \"1000000000\",\n      // Replace with an appropriate gas price\n      gas: 200000 // Replace with an appropriate gas limit\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [account, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: latitude,\n        onChange: e => setLatitude(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: longitude,\n        onChange: e => setLongitude(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: treeSpecies,\n        onChange: e => setTreeSpecies(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"string\",\n        value: plantingDate,\n        onChange: e => setPlantingDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: treeplantHandler,\n        children: \" treeplantHandler\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"z6tvygxwmUeQFUwj3/Eri+eGZfw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Web3","useState","useEffect","calc","toBN","treePlantingContract","jsxDEV","_jsxDEV","App","_s","account","setAccount","val","setVal","a","setA","b","setB","addresult","setAddResult","latitude","setLatitude","longitude","setLongitude","treeSpecies","setTreeSpecies","plantingDate","setPlantingDate","contract_address","networks","address","contract_abi","abi","treeAddress","treeABI","HttpProvider","web3","providers","contractData","eth","Contract","treeData","accountmeta","main","ethEnabled","accounts","getAccounts","console","log","window","ethereum","request","method","addHandler","methods","add","send","from","gasPrice","gas","treeplantHandler","addTreePlantingEvent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/upendra/Desktop/Developer/blockchain/practice/randomBasicProjects/basicclaculator2/treePlantationWEB3/client/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport { useState, useEffect } from \"react\";\nimport calc from \"./contracts/calculator.json\";\nimport { toBN } from \"web3-utils\";\nimport treePlantingContract from \"./contracts/TreePlantingContract.json\";\n\nfunction App() {\n  const [account, setAccount] = useState(0);\n  const [val, setVal] = useState(null);\n  const [a, setA] = useState(\"\");\n  const [b, setB] = useState(\"\");\n  const [addresult, setAddResult] = useState(\"\");\n\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [treeSpecies, setTreeSpecies] = useState(\"\");\n  const [plantingDate, setPlantingDate] = useState(\"\");\n\n  const contract_address = calc.networks[\"5777\"].address;\n\n  const contract_abi = calc.abi;\n\n  const treeAddress = treePlantingContract.networks[\"5777\"].address;\n\n  const treeABI = treePlantingContract.abi;\n\n  // const parsecontract = JSON.parse(JSON.stringify(contract_abi))\n\n  const HttpProvider = \"http://127.0.0.1:7545\";\n  // const web3 = new Web3(Web3.givenProvider || \"http://127.0.0.1:7545\");\n  const web3 = new Web3(new Web3.providers.HttpProvider(HttpProvider));\n  const contractData = new web3.eth.Contract(contract_abi, contract_address);\n  const treeData = new web3.eth.Contract(treeABI, treeAddress);\n\n  let accountmeta = 0;\n\n  useEffect(() => {\n    main();\n    ethEnabled();\n    // getcontract();\n  }, []);\n\n  const main = async () => {\n    const accounts = await web3.eth.getAccounts();\n    accountmeta = accounts[0];\n    setAccount(accountmeta);\n    console.log(account);\n  };\n\n  // const getcontract = async() => {\n  //   await contractData.methods.gettingdata().call().then(result => {\n\n  //     setData(result);\n  //     console.log(result);\n\n  //   });\n  //  // console.log(getval);\n  // };\n\n  //const Web3 = require(\"web3\");\n  const ethEnabled = async () => {\n    if (window.ethereum) {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      window.web3 = new Web3(window.ethereum);\n      console.log(\"metamask exist\");\n      return true;\n    }\n    console.log(\"metamask not exist\");\n    return false;\n  };\n\n  const addHandler = async () => {\n    await contractData.methods.add(a, b).send({\n      from: account,\n      gasPrice: \"1000000000\", // Replace with an appropriate gas price\n      gas: 200000, // Replace with an appropriate gas limit\n    });\n    // const res = await contractData.methods.showresult().call();\n    // console.log(res);\n    // setAddResult(res.toString());\n\n    setA(\"\");\n    setB(\"\");\n  };\n\n  const treeplantHandler = async () => {\n    await treeData.methods\n      .addTreePlantingEvent(latitude, longitude, treeSpecies, plantingDate)\n      .send({\n        from: account,\n        gasPrice: \"1000000000\", // Replace with an appropriate gas price\n        gas: 200000, // Replace with an appropriate gas limit\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {account}\n      \n      \n       \n        <br />\n        <input\n          type=\"string\"\n          value={latitude}\n          onChange={(e) => setLatitude(e.target.value)}\n        ></input>\n        <input\n          type=\"string\"\n          value={longitude}\n          onChange={(e) => setLongitude(e.target.value)}\n        ></input>{\" \"}\n        <input\n          type=\"string\"\n          value={treeSpecies}\n          onChange={(e) => setTreeSpecies(e.target.value)}\n        ></input>{\" \"}\n        <input\n          type=\"string\"\n          value={plantingDate}\n          onChange={(e) => setPlantingDate(e.target.value)}\n        ></input>\n        <button onClick={treeplantHandler}> treeplantHandler</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}